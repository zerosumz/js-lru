{
  "version": 3,
  "sources": ["lru.js"],
  "sourcesContent": ["/**\r\n * A doubly linked list-based Least Recently Used (LRU) cache. Will keep most\r\n * recently used items while discarding least recently used items when its limit\r\n * is reached.\r\n *\r\n * Licensed under MIT. Copyright (c) 2010 Rasmus Andersson <http://hunch.se/>\r\n * See README.md for details.\r\n *\r\n * Illustration of the design:\r\n *\r\n *       entry             entry             entry             entry\r\n *       ______            ______            ______            ______\r\n *      | head |.newer => |      |.newer => |      |.newer => | tail |\r\n *      |  A   |          |  B   |          |  C   |          |  D   |\r\n *      |______| <= older.|______| <= older.|______| <= older.|______|\r\n *\r\n *  removed  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  added\r\n */\r\n!function(g,f){\r\n  if (typeof exports == 'object' && typeof module != \"undefined\") {\r\n    f(exports)\r\n  } else if (typeof define == 'function' && define.amd) {\r\n    define([\"exports\"], f)\r\n  } else {\r\n    f((g = g || self)[\"lru_map\"] = (g[\"lru_map\"] || {}))\r\n  }\r\n}(this, function(exports) {\r\n\r\nconst NEWER = Symbol('newer');\r\nconst OLDER = Symbol('older');\r\n\r\nclass LRUMap {\r\n\r\n  /**\r\n   * \uC0AD\uC81C\uC2DC \uC2E4\uD589\uB420 \uCF5C\uBC31\uD568\uC218\r\n   *\r\n   * @callback evictCallback\r\n   * @param {*} \uC0AD\uC81C\uB41C\uAC1C\uCCB4\r\n   * @param {string} \uC0AD\uC81C\uB41C \uD0A4\r\n   */\r\n\r\n  /**\r\n   *\r\n   * @param limit\r\n   * @param entries\r\n   * @param {evictCallback} cb\r\n   */\r\n  constructor(limit, entries, cb) {\r\n    if (typeof limit !== 'number') {\r\n      // called as (entries)\r\n      entries = limit;\r\n      limit = 0;\r\n    }\r\n\r\n    this.size = 0;\r\n    this.limit = limit;\r\n    this.oldest = this.newest = undefined;\r\n    this._keymap = new Map();\r\n    this.deleteCallback = deleteCallback;\r\n\r\n    if (entries) {\r\n      this.assign(entries);\r\n      if (limit < 1) {\r\n        this.limit = this.size;\r\n      }\r\n    }\r\n  }\r\n\r\n  _markEntryAsUsed(entry) {\r\n    if (entry === this.newest) {\r\n      // Already the most recenlty used entry, so no need to update the list\r\n      return;\r\n    }\r\n    // HEAD--------------TAIL\r\n    //   <.older   .newer>\r\n    //  <--- add direction --\r\n    //   A  B  C  <D>  E\r\n    if (entry[NEWER]) {\r\n      if (entry === this.oldest) {\r\n        this.oldest = entry[NEWER];\r\n      }\r\n      entry[NEWER][OLDER] = entry[OLDER]; // C <-- E.\r\n    }\r\n    if (entry[OLDER]) {\r\n      entry[OLDER][NEWER] = entry[NEWER]; // C. --> E\r\n    }\r\n    entry[NEWER] = undefined; // D --x\r\n    entry[OLDER] = this.newest; // D. --> E\r\n    if (this.newest) {\r\n      this.newest[NEWER] = entry; // E. <-- D\r\n    }\r\n    this.newest = entry;\r\n  }\r\n\r\n  assign(entries) {\r\n    let entry, limit = this.limit || Number.MAX_VALUE;\r\n    this._keymap.clear();\r\n    let it = entries[Symbol.iterator]();\r\n    for (let itv = it.next(); !itv.done; itv = it.next()) {\r\n      let e = new Entry(itv.value[0], itv.value[1]);\r\n      this._keymap.set(e.key, e);\r\n      if (!entry) {\r\n        this.oldest = e;\r\n      } else {\r\n        entry[NEWER] = e;\r\n        e[OLDER] = entry;\r\n      }\r\n      entry = e;\r\n      if (limit-- == 0) {\r\n        throw new Error('overflow');\r\n      }\r\n    }\r\n    this.newest = entry;\r\n    this.size = this._keymap.size;\r\n  }\r\n\r\n  get(key) {\r\n    // First, find our cache entry\r\n    var entry = this._keymap.get(key);\r\n    if (!entry) return; // Not cached. Sorry.\r\n    // As <key> was found in the cache, register it as being requested recently\r\n    this._markEntryAsUsed(entry);\r\n    return entry.value;\r\n  }\r\n\r\n  set(key, value) {\r\n    var entry = this._keymap.get(key);\r\n\r\n    if (entry) {\r\n      // update existing\r\n      entry.value = value;\r\n      this._markEntryAsUsed(entry);\r\n      return this;\r\n    }\r\n\r\n    // new entry\r\n    this._keymap.set(key, (entry = new Entry(key, value)));\r\n\r\n    if (this.newest) {\r\n      // link previous tail to the new tail (entry)\r\n      this.newest[NEWER] = entry;\r\n      entry[OLDER] = this.newest;\r\n    } else {\r\n      // we're first in -- yay\r\n      this.oldest = entry;\r\n    }\r\n\r\n    // add new entry to the end of the linked list -- it's now the freshest entry.\r\n    this.newest = entry;\r\n    ++this.size;\r\n    if (this.size > this.limit) {\r\n      // we hit the limit -- remove the head\r\n      let[key, value] = this.shift();\r\n      this.deleteCallback(value, key);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  shift() {\r\n    // todo: handle special case when limit == 1\r\n    var entry = this.oldest;\r\n    if (entry) {\r\n      if (this.oldest[NEWER]) {\r\n        // advance the list\r\n        this.oldest = this.oldest[NEWER];\r\n        this.oldest[OLDER] = undefined;\r\n      } else {\r\n        // the cache is exhausted\r\n        this.oldest = undefined;\r\n        this.newest = undefined;\r\n      }\r\n      // Remove last strong reference to <entry> and remove links from the purged\r\n      // entry being returned:\r\n      entry[NEWER] = entry[OLDER] = undefined;\r\n      this._keymap.delete(entry.key);\r\n      --this.size;\r\n      return [entry.key, entry.value];\r\n    }\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------\r\n  // Following code (until end of class definition) is optional and can be removed without\r\n  // breaking the core functionality.\r\n\r\n  find(key) {\r\n    let e = this._keymap.get(key);\r\n    return e ? e.value : undefined;\r\n  }\r\n\r\n  has(key) {\r\n    return this._keymap.has(key);\r\n  }\r\n\r\n  delete(key) {\r\n    var entry = this._keymap.get(key);\r\n    if (!entry) return;\r\n    this._keymap.delete(entry.key);\r\n    if (entry[NEWER] && entry[OLDER]) {\r\n      // relink the older entry with the newer entry\r\n      entry[OLDER][NEWER] = entry[NEWER];\r\n      entry[NEWER][OLDER] = entry[OLDER];\r\n    } else if (entry[NEWER]) {\r\n      // remove the link to us\r\n      entry[NEWER][OLDER] = undefined;\r\n      // link the newer entry to head\r\n      this.oldest = entry[NEWER];\r\n    } else if (entry[OLDER]) {\r\n      // remove the link to us\r\n      entry[OLDER][NEWER] = undefined;\r\n      // link the newer entry to head\r\n      this.newest = entry[OLDER];\r\n    } else {// if(entry[OLDER] === undefined && entry.newer === undefined) {\r\n      this.oldest = this.newest = undefined;\r\n    }\r\n\r\n    this.size--;\r\n    return entry.value;\r\n  }\r\n\r\n  clear() {\r\n    // Not clearing links should be safe, as we don't expose live links to user\r\n    this.oldest = this.newest = undefined;\r\n    this.size = 0;\r\n    this._keymap.clear();\r\n  }\r\n\r\n  keys() {\r\n    return new KeyIterator(this.oldest);\r\n  }\r\n\r\n  values() {\r\n    return new ValueIterator(this.oldest);\r\n  }\r\n\r\n  entries() {\r\n    return this;\r\n  }\r\n\r\n  [Symbol.iterator]() {\r\n    return new EntryIterator(this.oldest);\r\n  }\r\n\r\n  forEach(fun, thisObj) {\r\n    if (typeof thisObj !== 'object') {\r\n      thisObj = this;\r\n    }\r\n    let entry = this.oldest;\r\n    while (entry) {\r\n      fun.call(thisObj, entry.value, entry.key, this);\r\n      entry = entry[NEWER];\r\n    }\r\n  }\r\n\r\n  /** Returns a JSON (array) representation */\r\n  toJSON() {\r\n    var s = new Array(this.size), i = 0, entry = this.oldest;\r\n    while (entry) {\r\n      s[i++] = { key: entry.key, value: entry.value };\r\n      entry = entry[NEWER];\r\n    }\r\n    return s;\r\n  }\r\n\r\n  /** Returns a String representation */\r\n  toString() {\r\n    var s = '', entry = this.oldest;\r\n    while (entry) {\r\n      s += String(entry.key)+':'+entry.value;\r\n      entry = entry[NEWER];\r\n      if (entry) {\r\n        s += ' < ';\r\n      }\r\n    }\r\n    return s;\r\n  }\r\n}\r\n\r\nexports.LRUMap = LRUMap\r\n\r\nfunction Entry(key, value) {\r\n  this.key = key;\r\n  this.value = value;\r\n  this[NEWER] = undefined;\r\n  this[OLDER] = undefined;\r\n}\r\n\r\n\r\nfunction EntryIterator(oldestEntry) { this.entry = oldestEntry; }\r\nEntryIterator.prototype[Symbol.iterator] = function() { return this; }\r\nEntryIterator.prototype.next = function() {\r\n  let ent = this.entry;\r\n  if (ent) {\r\n    this.entry = ent[NEWER];\r\n    return { done: false, value: [ent.key, ent.value] };\r\n  } else {\r\n    return { done: true, value: undefined };\r\n  }\r\n};\r\n\r\n\r\nfunction KeyIterator(oldestEntry) { this.entry = oldestEntry; }\r\nKeyIterator.prototype[Symbol.iterator] = function() { return this; }\r\nKeyIterator.prototype.next = function() {\r\n  let ent = this.entry;\r\n  if (ent) {\r\n    this.entry = ent[NEWER];\r\n    return { done: false, value: ent.key };\r\n  } else {\r\n    return { done: true, value: undefined };\r\n  }\r\n};\r\n\r\nfunction ValueIterator(oldestEntry) { this.entry = oldestEntry; }\r\nValueIterator.prototype[Symbol.iterator] = function() { return this; }\r\nValueIterator.prototype.next = function() {\r\n  let ent = this.entry;\r\n  if (ent) {\r\n    this.entry = ent[NEWER];\r\n    return { done: false, value: ent.value };\r\n  } else {\r\n    return { done: true, value: undefined };\r\n  }\r\n};\r\n\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
